// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Logging_Host_GRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProtoServiceILoggingApplicationClient is the client API for ProtoServiceILoggingApplication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoServiceILoggingApplicationClient interface {
	Register(ctx context.Context, in *ProtoSingleInputMessageLoggingRegisterDTO, opts ...grpc.CallOption) (*ProtoSingleOutputMessageVoidDTO, error)
	RegisterBulk(ctx context.Context, in *ProtoMultipleInputMessageLoggingRegisterDTO, opts ...grpc.CallOption) (*ProtoSingleOutputMessageVoidDTO, error)
	SendRegisterOperation(ctx context.Context, in *ProtoSingleInputMessageLoggingRegisterListDTO, opts ...grpc.CallOption) (*ProtoSingleOutputMessageVoidDTO, error)
	GetStatus(ctx context.Context, in *ProtoSingleInputMessageGetStatusInputDTO, opts ...grpc.CallOption) (*ProtoSingleOutputMessageGetStatusOutputDTO, error)
	SetConfigurations(ctx context.Context, in *ProtoSingleInputMessageSetConfigurationsInputDTO, opts ...grpc.CallOption) (*ProtoSingleOutputMessageVoidDTO, error)
	GetConfigurations(ctx context.Context, in *ProtoSingleInputMessageVoidDTO, opts ...grpc.CallOption) (*ProtoSingleOutputMessageGetConfigurationsOutputDTO, error)
}

type protoServiceILoggingApplicationClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoServiceILoggingApplicationClient(cc grpc.ClientConnInterface) ProtoServiceILoggingApplicationClient {
	return &protoServiceILoggingApplicationClient{cc}
}

func (c *protoServiceILoggingApplicationClient) Register(ctx context.Context, in *ProtoSingleInputMessageLoggingRegisterDTO, opts ...grpc.CallOption) (*ProtoSingleOutputMessageVoidDTO, error) {
	out := new(ProtoSingleOutputMessageVoidDTO)
	err := c.cc.Invoke(ctx, "/Logging.Host.GRPC.ProtoServiceILoggingApplication/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoServiceILoggingApplicationClient) RegisterBulk(ctx context.Context, in *ProtoMultipleInputMessageLoggingRegisterDTO, opts ...grpc.CallOption) (*ProtoSingleOutputMessageVoidDTO, error) {
	out := new(ProtoSingleOutputMessageVoidDTO)
	err := c.cc.Invoke(ctx, "/Logging.Host.GRPC.ProtoServiceILoggingApplication/RegisterBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoServiceILoggingApplicationClient) SendRegisterOperation(ctx context.Context, in *ProtoSingleInputMessageLoggingRegisterListDTO, opts ...grpc.CallOption) (*ProtoSingleOutputMessageVoidDTO, error) {
	out := new(ProtoSingleOutputMessageVoidDTO)
	err := c.cc.Invoke(ctx, "/Logging.Host.GRPC.ProtoServiceILoggingApplication/SendRegisterOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoServiceILoggingApplicationClient) GetStatus(ctx context.Context, in *ProtoSingleInputMessageGetStatusInputDTO, opts ...grpc.CallOption) (*ProtoSingleOutputMessageGetStatusOutputDTO, error) {
	out := new(ProtoSingleOutputMessageGetStatusOutputDTO)
	err := c.cc.Invoke(ctx, "/Logging.Host.GRPC.ProtoServiceILoggingApplication/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoServiceILoggingApplicationClient) SetConfigurations(ctx context.Context, in *ProtoSingleInputMessageSetConfigurationsInputDTO, opts ...grpc.CallOption) (*ProtoSingleOutputMessageVoidDTO, error) {
	out := new(ProtoSingleOutputMessageVoidDTO)
	err := c.cc.Invoke(ctx, "/Logging.Host.GRPC.ProtoServiceILoggingApplication/SetConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoServiceILoggingApplicationClient) GetConfigurations(ctx context.Context, in *ProtoSingleInputMessageVoidDTO, opts ...grpc.CallOption) (*ProtoSingleOutputMessageGetConfigurationsOutputDTO, error) {
	out := new(ProtoSingleOutputMessageGetConfigurationsOutputDTO)
	err := c.cc.Invoke(ctx, "/Logging.Host.GRPC.ProtoServiceILoggingApplication/GetConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtoServiceILoggingApplicationServer is the server API for ProtoServiceILoggingApplication service.
// All implementations must embed UnimplementedProtoServiceILoggingApplicationServer
// for forward compatibility
type ProtoServiceILoggingApplicationServer interface {
	Register(context.Context, *ProtoSingleInputMessageLoggingRegisterDTO) (*ProtoSingleOutputMessageVoidDTO, error)
	RegisterBulk(context.Context, *ProtoMultipleInputMessageLoggingRegisterDTO) (*ProtoSingleOutputMessageVoidDTO, error)
	SendRegisterOperation(context.Context, *ProtoSingleInputMessageLoggingRegisterListDTO) (*ProtoSingleOutputMessageVoidDTO, error)
	GetStatus(context.Context, *ProtoSingleInputMessageGetStatusInputDTO) (*ProtoSingleOutputMessageGetStatusOutputDTO, error)
	SetConfigurations(context.Context, *ProtoSingleInputMessageSetConfigurationsInputDTO) (*ProtoSingleOutputMessageVoidDTO, error)
	GetConfigurations(context.Context, *ProtoSingleInputMessageVoidDTO) (*ProtoSingleOutputMessageGetConfigurationsOutputDTO, error)
	mustEmbedUnimplementedProtoServiceILoggingApplicationServer()
}

// UnimplementedProtoServiceILoggingApplicationServer must be embedded to have forward compatible implementations.
type UnimplementedProtoServiceILoggingApplicationServer struct {
}

func (*UnimplementedProtoServiceILoggingApplicationServer) Register(context.Context, *ProtoSingleInputMessageLoggingRegisterDTO) (*ProtoSingleOutputMessageVoidDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedProtoServiceILoggingApplicationServer) RegisterBulk(context.Context, *ProtoMultipleInputMessageLoggingRegisterDTO) (*ProtoSingleOutputMessageVoidDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBulk not implemented")
}
func (*UnimplementedProtoServiceILoggingApplicationServer) SendRegisterOperation(context.Context, *ProtoSingleInputMessageLoggingRegisterListDTO) (*ProtoSingleOutputMessageVoidDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRegisterOperation not implemented")
}
func (*UnimplementedProtoServiceILoggingApplicationServer) GetStatus(context.Context, *ProtoSingleInputMessageGetStatusInputDTO) (*ProtoSingleOutputMessageGetStatusOutputDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedProtoServiceILoggingApplicationServer) SetConfigurations(context.Context, *ProtoSingleInputMessageSetConfigurationsInputDTO) (*ProtoSingleOutputMessageVoidDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfigurations not implemented")
}
func (*UnimplementedProtoServiceILoggingApplicationServer) GetConfigurations(context.Context, *ProtoSingleInputMessageVoidDTO) (*ProtoSingleOutputMessageGetConfigurationsOutputDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigurations not implemented")
}
func (*UnimplementedProtoServiceILoggingApplicationServer) mustEmbedUnimplementedProtoServiceILoggingApplicationServer() {
}

func RegisterProtoServiceILoggingApplicationServer(s *grpc.Server, srv ProtoServiceILoggingApplicationServer) {
	s.RegisterService(&_ProtoServiceILoggingApplication_serviceDesc, srv)
}

func _ProtoServiceILoggingApplication_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoSingleInputMessageLoggingRegisterDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceILoggingApplicationServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Logging.Host.GRPC.ProtoServiceILoggingApplication/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceILoggingApplicationServer).Register(ctx, req.(*ProtoSingleInputMessageLoggingRegisterDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoServiceILoggingApplication_RegisterBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoMultipleInputMessageLoggingRegisterDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceILoggingApplicationServer).RegisterBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Logging.Host.GRPC.ProtoServiceILoggingApplication/RegisterBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceILoggingApplicationServer).RegisterBulk(ctx, req.(*ProtoMultipleInputMessageLoggingRegisterDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoServiceILoggingApplication_SendRegisterOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoSingleInputMessageLoggingRegisterListDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceILoggingApplicationServer).SendRegisterOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Logging.Host.GRPC.ProtoServiceILoggingApplication/SendRegisterOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceILoggingApplicationServer).SendRegisterOperation(ctx, req.(*ProtoSingleInputMessageLoggingRegisterListDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoServiceILoggingApplication_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoSingleInputMessageGetStatusInputDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceILoggingApplicationServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Logging.Host.GRPC.ProtoServiceILoggingApplication/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceILoggingApplicationServer).GetStatus(ctx, req.(*ProtoSingleInputMessageGetStatusInputDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoServiceILoggingApplication_SetConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoSingleInputMessageSetConfigurationsInputDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceILoggingApplicationServer).SetConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Logging.Host.GRPC.ProtoServiceILoggingApplication/SetConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceILoggingApplicationServer).SetConfigurations(ctx, req.(*ProtoSingleInputMessageSetConfigurationsInputDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoServiceILoggingApplication_GetConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoSingleInputMessageVoidDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceILoggingApplicationServer).GetConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Logging.Host.GRPC.ProtoServiceILoggingApplication/GetConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceILoggingApplicationServer).GetConfigurations(ctx, req.(*ProtoSingleInputMessageVoidDTO))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProtoServiceILoggingApplication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Logging.Host.GRPC.ProtoServiceILoggingApplication",
	HandlerType: (*ProtoServiceILoggingApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ProtoServiceILoggingApplication_Register_Handler,
		},
		{
			MethodName: "RegisterBulk",
			Handler:    _ProtoServiceILoggingApplication_RegisterBulk_Handler,
		},
		{
			MethodName: "SendRegisterOperation",
			Handler:    _ProtoServiceILoggingApplication_SendRegisterOperation_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _ProtoServiceILoggingApplication_GetStatus_Handler,
		},
		{
			MethodName: "SetConfigurations",
			Handler:    _ProtoServiceILoggingApplication_SetConfigurations_Handler,
		},
		{
			MethodName: "GetConfigurations",
			Handler:    _ProtoServiceILoggingApplication_GetConfigurations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Logging.proto",
}
