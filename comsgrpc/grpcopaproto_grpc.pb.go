// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcopaproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HttpRequestClient is the client API for HttpRequest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpRequestClient interface {
	AuthzService(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type httpRequestClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpRequestClient(cc grpc.ClientConnInterface) HttpRequestClient {
	return &httpRequestClient{cc}
}

func (c *httpRequestClient) AuthzService(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/grpcopaproto.HttpRequest/AuthzService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpRequestServer is the server API for HttpRequest service.
// All implementations must embed UnimplementedHttpRequestServer
// for forward compatibility
type HttpRequestServer interface {
	AuthzService(context.Context, *Request) (*Reply, error)
	mustEmbedUnimplementedHttpRequestServer()
}

// UnimplementedHttpRequestServer must be embedded to have forward compatible implementations.
type UnimplementedHttpRequestServer struct {
}

func (*UnimplementedHttpRequestServer) AuthzService(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthzService not implemented")
}
func (*UnimplementedHttpRequestServer) mustEmbedUnimplementedHttpRequestServer() {}

func RegisterHttpRequestServer(s *grpc.Server, srv HttpRequestServer) {
	s.RegisterService(&_HttpRequest_serviceDesc, srv)
}

func _HttpRequest_AuthzService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpRequestServer).AuthzService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcopaproto.HttpRequest/AuthzService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpRequestServer).AuthzService(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _HttpRequest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcopaproto.HttpRequest",
	HandlerType: (*HttpRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthzService",
			Handler:    _HttpRequest_AuthzService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcopaproto.proto",
}
